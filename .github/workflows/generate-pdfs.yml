name: Generate PDF Slides

on:
  push:
    branches: [ main ]
    paths: 
      - 'lectures/**/*.html'
      - 'theme/**/*.css'
      - 'dist/**'
  pull_request:
    branches: [ main ]
    paths: 
      - 'lectures/**/*.html'
      - 'theme/**/*.css'
      - 'dist/**'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

jobs:
  generate-pdfs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Chrome dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable || echo "Chrome already installed"
        
    - name: Install dependencies
      run: |
        npm init -y
        PUPPETEER_SKIP_DOWNLOAD=true npm install puppeteer
      env:
        PUPPETEER_SKIP_DOWNLOAD: true
        
    - name: Create PDF generation script
      run: |
        cat > generate-pdfs.js << 'EOF'
        const puppeteer = require('puppeteer');
        const fs = require('fs');
        const path = require('path');
        
        async function generatePDF(htmlPath, outputPath) {
          console.log(`Starting PDF generation for: ${htmlPath}`);
          
          if (!fs.existsSync(htmlPath)) {
            throw new Error(`HTML file does not exist: ${htmlPath}`);
          }
          
          const browser = await puppeteer.launch({
            headless: true,
            args: [
              '--no-sandbox', 
              '--disable-setuid-sandbox',
              '--disable-dev-shm-usage',
              '--disable-web-security',
              '--disable-features=VizDisplayCompositor'
            ],
            executablePath: '/usr/bin/google-chrome-stable'
          });
          
          const page = await browser.newPage();
          await page.setViewport({ width: 1280, height: 720 });
          
          const fullPath = 'file://' + path.resolve(htmlPath);
          console.log(`Loading: ${fullPath}`);
          
          try {
            await page.goto(fullPath, { 
              waitUntil: 'networkidle0',
              timeout: 20000 
            });
          } catch (timeoutError) {
            console.log('Network idle timeout, trying with domcontentloaded...');
            await page.goto(fullPath, { 
              waitUntil: 'domcontentloaded',
              timeout: 10000 
            });
          }
          
          console.log('Page loaded, waiting for Reveal.js and adding print styles...');
          
          // Wait for Reveal.js to be ready
          await page.waitForFunction(
            () => typeof window.Reveal !== 'undefined' && window.Reveal.isReady && window.Reveal.isReady(),
            { timeout: 10000 }
          );
          
          console.log('Reveal.js is ready, adding print styles...');
          
          // Add reveal.js print CSS
          await page.addStyleTag({
            content: `
              @media print {
                .reveal .slides {
                  width: 297mm !important;
                  height: 210mm !important;
                  left: 0 !important;
                  top: 0 !important;
                  transform: none !important;
                  zoom: 1 !important;
                }
                .reveal .slides section {
                  width: 297mm !important;
                  height: 210mm !important;
                  page-break-after: always !important;
                  position: relative !important;
                  margin: 0 !important;
                  padding: 40px !important;
                  box-sizing: border-box !important;
                  display: flex !important;
                  flex-direction: column !important;
                  justify-content: center !important;
                }
                .reveal .backgrounds {
                  display: none !important;
                }
                .reveal .progress {
                  display: none !important;
                }
                .reveal .controls {
                  display: none !important;
                }
              }
            `
          });
          
          // Wait for styles to apply and Reveal.js to fully initialize
          await new Promise(resolve => setTimeout(resolve, 5000));
          
          console.log('Generating PDF...');
          
          const pdf = await page.pdf({
            path: outputPath,
            format: 'A4',
            landscape: true,
            printBackground: true,
            preferCSSPageSize: true,
            margin: {
              top: '10mm',
              right: '10mm',
              bottom: '10mm',
              left: '10mm'
            }
          });
          
          await browser.close();
          console.log(`PDF generated successfully: ${outputPath}`);
          return true;
        }
        
        async function main() {
          try {
            console.log('Starting PDF generation process...');
            
            // Create PDFs directory
            if (!fs.existsSync('pdfs')) {
              fs.mkdirSync('pdfs', { recursive: true });
              console.log('Created pdfs directory');
            }
            
            // Find all lecture HTML files in the simplified structure
            const lecturesDir = 'lectures';
            if (!fs.existsSync(lecturesDir)) {
              throw new Error(`Lectures directory does not exist: ${lecturesDir}`);
            }
            
            const lectures = fs.readdirSync(lecturesDir, { withFileTypes: true })
              .filter(dirent => dirent.isFile() && dirent.name.endsWith('.html'))
              .map(dirent => dirent.name)
              .sort();
            
            console.log(`Found lectures: ${lectures.join(', ')}`);
            
            let generatedCount = 0;
            for (const lectureFile of lectures) {
              const htmlPath = path.join(lecturesDir, lectureFile);
              const lectureName = path.basename(lectureFile, '.html');
              const pdfPath = path.join('pdfs', `${lectureName}.pdf`);
              
              await generatePDF(htmlPath, pdfPath);
              generatedCount++;
            }
            
            console.log(`Successfully generated ${generatedCount} PDF files!`);
          } catch (error) {
            console.error('Error in main function:', error);
            process.exit(1);
          }
        }
        
        main();
        EOF
        
    - name: Generate PDFs
      run: node generate-pdfs.js
      
    - name: Update PDF directory README
      run: |
        echo "# AI-Assisted Programming - PDF Slides" > pdfs/README.md
        echo "" >> pdfs/README.md
        echo "This directory contains PDF exports of all lecture slides, automatically generated from the HTML presentations." >> pdfs/README.md
        echo "" >> pdfs/README.md
        echo "## Available Lectures:" >> pdfs/README.md
        echo "" >> pdfs/README.md
        
        # List all PDF files with new naming convention
        for file in pdfs/*.pdf; do
          if [ -f "$file" ]; then
            filename=$(basename "$file" .pdf)
            # Convert lecture1-course-introduction to "Lecture 1: Course Introduction"
            if [[ $filename =~ lecture([0-9]+)-(.+) ]]; then
              number="${BASH_REMATCH[1]}"
              title="${BASH_REMATCH[2]}"
              # Convert hyphen-separated title to title case
              title=$(echo "$title" | sed 's/-/ /g' | sed 's/\b./\u&/g')
              display_name="Lecture ${number}: ${title}"
            else
              display_name="$filename"
            fi
            echo "- [${display_name}](./${filename}.pdf) - ${filename} slides" >> pdfs/README.md
          fi
        done
        
        # Check if no PDF files were found
        if ! ls pdfs/*.pdf 1> /dev/null 2>&1; then
          echo "- No PDF files available yet" >> pdfs/README.md
        fi
        
        echo "" >> pdfs/README.md
        echo "## Features:" >> pdfs/README.md
        echo "" >> pdfs/README.md
        echo "- **Professional Layout**: Clean, white background with professional typography" >> pdfs/README.md
        echo "- **High Quality**: Generated at optimal resolution for printing and viewing" >> pdfs/README.md
        echo "- **Responsive**: Content properly sized for standard display and print formats" >> pdfs/README.md
        echo "- **Automatic Updates**: PDFs are regenerated automatically when slides are updated" >> pdfs/README.md
        echo "" >> pdfs/README.md
        echo "## Usage:" >> pdfs/README.md
        echo "" >> pdfs/README.md
        echo "1. **View Online**: Click the PDF links above to view in your browser" >> pdfs/README.md
        echo "2. **Download**: Right-click and \"Save As\" to download PDFs locally" >> pdfs/README.md
        echo "3. **Print**: PDFs are optimized for A4 landscape printing" >> pdfs/README.md
        echo "" >> pdfs/README.md
        echo "---" >> pdfs/README.md
        echo "" >> pdfs/README.md
        echo "*Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC') by GitHub Actions*" >> pdfs/README.md
      
    - name: Setup Python for front page update
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Update front page with new PDFs
      run: |
        echo "ðŸ”„ Updating front page with new PDF links..."
        python update_front_page.py
        
    - name: Commit PDF files and front page updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pdfs/ index.html
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-generate PDF slides and update front page [skip ci]" || exit 0
          git push
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Trigger README update
      run: |
        # Trigger the README update workflow by making a small change
        echo "PDF generation completed at $(date)" >> .pdf-generation-log
        git add .pdf-generation-log
        git commit -m "Trigger README update after PDF generation" || exit 0
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}